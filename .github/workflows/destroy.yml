name: Destroy
on: workflow_dispatch

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGION: eastus
  PREFIX: devsecopsaca
  RG: rg-devsecops-aca
  TFSTATE_SA: stdevsecopsacatfstate
  TFSTATE_CONTAINER: tfstate
  TFSTATE_KEY: devsecopsaca.tfstate
  QUEUE_NAME: tasks

jobs:
  destroy:
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - uses: hashicorp/setup-terraform@v3

      - name: Verify Blob Data role for TF state (retry)
        shell: bash
        run: |
          set -e
          SUB_ID=$(az account show --query id -o tsv)
          APP_ID="${{ secrets.AZURE_CLIENT_ID }}"
          SP_OBJ_ID=$(az ad sp show --id "$APP_ID" --query id -o tsv)
          SCOPE="/subscriptions/$SUB_ID/resourceGroups/${{ env.RG }}/providers/Microsoft.Storage/storageAccounts/${{ env.TFSTATE_SA }}"
          az role assignment list --assignee-object-id "$SP_OBJ_ID" --scope "$SCOPE" \
            --role "Storage Blob Data Contributor" --query "[0].id" -o tsv | grep . || az role assignment create \
              --assignee-object-id "$SP_OBJ_ID" \
              --assignee-principal-type ServicePrincipal \
              --role "Storage Blob Data Contributor" \
              --scope "$SCOPE" >/dev/null
          for i in {1..12}; do
            if az storage blob list --account-name "${{ env.TFSTATE_SA }}" \
              --container-name "${{ env.TFSTATE_CONTAINER }}" --auth-mode login 1>/dev/null 2>&1; then
              echo "RBAC verified"; break
            fi
            echo "Waiting for RBAC propagation... ($i/12)"; sleep 10
          done

      - name: Terraform Init (remote backend)
        working-directory: infra
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.RG }}" \
            -backend-config="storage_account_name=${{ env.TFSTATE_SA }}" \
            -backend-config="container_name=${{ env.TFSTATE_CONTAINER }}" \
            -backend-config="key=${{ env.TFSTATE_KEY }}" \
            -backend-config="use_azuread_auth=true"

      - name: Break stale Terraform lock (if any)
        shell: bash
        run: |
          set -e
          SA="${{ env.TFSTATE_SA }}"
          CN="${{ env.TFSTATE_CONTAINER }}"
          KEY="${{ env.TFSTATE_KEY }}"
          if az storage blob show --account-name "$SA" -c "$CN" -n "$KEY" --auth-mode login >/dev/null 2>&1; then
            ST=$(az storage blob show --account-name "$SA" -c "$CN" -n "$KEY" --auth-mode login --query "properties.lease.state" -o tsv || echo "")
            SS=$(az storage blob show --account-name "$SA" -c "$CN" -n "$KEY" --auth-mode login --query "properties.lease.status" -o tsv || echo "")
            if [ "$ST" = "leased" ] || [ "$SS" = "locked" ]; then
              az storage blob lease break --account-name "$SA" -c "$CN" --blob-name "$KEY" --auth-mode login >/dev/null
              sleep 5
            fi
          fi

      - name: Terraform Plan (destroy)
        working-directory: infra
        run: |
          terraform plan -destroy -input=false -no-color \
            -var="prefix=${{ env.PREFIX }}" \
            -var="location=${{ env.REGION }}" \
            -var="resource_group_name=${{ env.RG }}" \
            -var="queue_name=${{ env.QUEUE_NAME }}" \
            -var="create_apps=true"

      - name: Terraform Destroy (apps + infra)
        working-directory: infra
        run: |
          terraform destroy -auto-approve -lock-timeout=2m \
            -var="prefix=${{ env.PREFIX }}" \
            -var="location=${{ env.REGION }}" \
            -var="resource_group_name=${{ env.RG }}" \
            -var="queue_name=${{ env.QUEUE_NAME }}" \
            -var="create_apps=true"

      # Delete the entire RG for $0 spend (subscription-level RBAC lets CI recreate it later)
      - name: Delete Resource Group
        shell: bash
        run: |
          az group delete -n "${{ env.RG }}" --yes --no-wait || true
          echo "RG deletion submitted."

      - name: Summary
        if: always()
        run: echo "Destroy complete; RG deletion submitted (asynchronous)."
