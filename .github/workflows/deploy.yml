name: Deploy
on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGION: eastus
  PREFIX: devsecopsaca
  RG: rg-devsecops-aca
  TFSTATE_SA: stdevsecopsacatfstate
  TFSTATE_CONTAINER: tfstate
  TFSTATE_KEY: devsecopsaca.tfstate
  QUEUE_NAME: tasks

jobs:
  infra-bootstrap:
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - uses: hashicorp/setup-terraform@v3

      - name: Bootstrap TF state storage (idempotent)
        run: |
          set -e
          az storage account create \
            -g "${{ env.RG }}" -n "${{ env.TFSTATE_SA }}" -l "${{ env.REGION }}" \
            --sku Standard_LRS --kind StorageV2 >/dev/null
          az storage container create \
            --account-name "${{ env.TFSTATE_SA }}" \
            --name "${{ env.TFSTATE_CONTAINER }}" \
            --auth-mode login >/dev/null

      - name: Grant Blob Data role to CI principal + verify
        run: |
          set -e
          SUB_ID=$(az account show --query id -o tsv)
          APP_ID="${{ secrets.AZURE_CLIENT_ID }}"
          SP_OBJ_ID=$(az ad sp show --id "$APP_ID" --query id -o tsv)
          SCOPE="/subscriptions/$SUB_ID/resourceGroups/${{ env.RG }}/providers/Microsoft.Storage/storageAccounts/${{ env.TFSTATE_SA }}"
          az role assignment list --assignee-object-id "$SP_OBJ_ID" --scope "$SCOPE" \
            --role "Storage Blob Data Contributor" --query "[0].id" -o tsv | grep . || az role assignment create \
              --assignee-object-id "$SP_OBJ_ID" \
              --assignee-principal-type ServicePrincipal \
              --role "Storage Blob Data Contributor" \
              --scope "$SCOPE" >/dev/null
          echo "Waiting for RBAC propagation..."; sleep 60
          az storage blob list --account-name "${{ env.TFSTATE_SA }}" \
            --container-name "${{ env.TFSTATE_CONTAINER }}" --auth-mode login 1>/dev/null

      - name: Terraform Init (remote backend)
        working-directory: infra
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.RG }}" \
            -backend-config="storage_account_name=${{ env.TFSTATE_SA }}" \
            -backend-config="container_name=${{ env.TFSTATE_CONTAINER }}" \
            -backend-config="key=${{ env.TFSTATE_KEY }}" \
            -backend-config="use_azuread_auth=true"

      - name: Break stale Terraform lock on backend (if any)
        run: |
          set -e
          SA="${{ env.TFSTATE_SA }}"
          CN="${{ env.TFSTATE_CONTAINER }}"
          KEY="${{ env.TFSTATE_KEY }}"
          if az storage blob show --account-name "$SA" -c "$CN" -n "$KEY" --auth-mode login >/dev/null 2>&1; then
            ST=$(az storage blob show --account-name "$SA" -c "$CN" -n "$KEY" --auth-mode login --query "properties.lease.state" -o tsv || echo "")
            SS=$(az storage blob show --account-name "$SA" -c "$CN" -n "$KEY" --auth-mode login --query "properties.lease.status" -o tsv || echo "")
            if [ "$ST" = "leased" ] || [ "$SS" = "locked" ]; then
              az storage blob lease break --account-name "$SA" -c "$CN" --blob-name "$KEY" --auth-mode login >/dev/null
              sleep 5
            fi
          fi

      # SAFE IMPORTS (no KV access policy here)
      - name: Terraform Import existing (safe if absent)
        working-directory: infra
        run: |
          set -e
          SUB=$(az account show --query id -o tsv)
          RG="${{ env.RG }}"
          PREFIX="${{ env.PREFIX }}"
          QUEUE="${{ env.QUEUE_NAME }}"

          APPINSIGHTS_ID="/subscriptions/$SUB/resourceGroups/$RG/providers/Microsoft.Insights/components/${PREFIX}-appi"
          SB_QUEUE_ID="/subscriptions/$SUB/resourceGroups/$RG/providers/Microsoft.ServiceBus/namespaces/${PREFIX}-sbns/queues/${QUEUE}"
          SB_SAS_ID="/subscriptions/$SUB/resourceGroups/$RG/providers/Microsoft.ServiceBus/namespaces/${PREFIX}-sbns/authorizationRules/app-shared"
          ACA_ENV_ID="/subscriptions/$SUB/resourceGroups/$RG/providers/Microsoft.App/managedEnvironments/${PREFIX}-acaenv"

          exists () { az resource show --ids "$1" >/dev/null 2>&1; }
          instate () { terraform state show "$1" >/dev/null 2>&1; }

          if exists "$APPINSIGHTS_ID" && ! instate azurerm_application_insights.appi; then
            terraform import azurerm_application_insights.appi "$APPINSIGHTS_ID" || true
          fi
          if exists "$SB_QUEUE_ID" && ! instate azurerm_servicebus_queue.q; then
            terraform import azurerm_servicebus_queue.q "$SB_QUEUE_ID" || true
          fi
          if exists "$SB_SAS_ID" && ! instate azurerm_servicebus_namespace_authorization_rule.sas; then
            terraform import azurerm_servicebus_namespace_authorization_rule.sas "$SB_SAS_ID" || true
          fi
          if exists "$ACA_ENV_ID" && ! instate azurerm_container_app_environment.env; then
            terraform import azurerm_container_app_environment.env "$ACA_ENV_ID" || true
          fi

          # Optional: import SB secret if it already exists
          SECRET_ID=$(az keyvault secret show --vault-name "${PREFIX}-kv" \
            --name ServiceBusConnection --query id -o tsv 2>/dev/null || true)
          if [ -n "$SECRET_ID" ] && ! instate azurerm_key_vault_secret.sb_conn; then
            terraform import azurerm_key_vault_secret.sb_conn "$SECRET_ID" || true
          fi

      - name: Terraform Apply (infra only)
        working-directory: infra
        run: |
          terraform apply -auto-approve -input=false -no-color -lock-timeout=2m \
            -var="prefix=${{ env.PREFIX }}" \
            -var="location=${{ env.REGION }}" \
            -var="resource_group_name=${{ env.RG }}" \
            -var="queue_name=${{ env.QUEUE_NAME }}" \
            -var="create_apps=false"

  build-and-push:
    needs: [infra-bootstrap]
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get ACR login server
        id: acr
        run: |
          ACR=$(az acr list -g "${{ env.RG }}" --query "[?contains(name, '${{ env.PREFIX }}acr')].loginServer | [0]" -o tsv)
          echo "login_server=${ACR}" >> $GITHUB_OUTPUT

      - name: ACR login
        run: az acr login --name $(echo "${{ steps.acr.outputs.login_server }}" | cut -d. -f1)

      - name: Build & push API
        working-directory: app/api
        run: |
          docker build -t "${{ steps.acr.outputs.login_server }}/${{ env.PREFIX }}-api:${{ github.sha }}" -f Dockerfile .
          docker push "${{ steps.acr.outputs.login_server }}/${{ env.PREFIX }}-api:${{ github.sha }}"

      - name: Build & push Worker
        working-directory: app/worker
        run: |
          docker build -t "${{ steps.acr.outputs.login_server }}/${{ env.PREFIX }}-worker:${{ github.sha }}" -f Dockerfile .
          docker push "${{ steps.acr.outputs.login_server }}/${{ env.PREFIX }}-worker:${{ github.sha }}"

  create-apps:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - uses: hashicorp/setup-terraform@v3

      - name: Terraform Init (remote backend)
        working-directory: infra
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.RG }}" \
            -backend-config="storage_account_name=${{ env.TFSTATE_SA }}" \
            -backend-config="container_name=${{ env.TFSTATE_CONTAINER }}" \
            -backend-config="key=${{ env.TFSTATE_KEY }}" \
            -backend-config="use_azuread_auth=true"

      # >>> THIS WAS THE ROOT CAUSE: make the resources exist in config during import
      - name: Import env + apps (safe if absent)
        working-directory: infra
        env:
          TF_VAR_create_apps: "true"
          TF_VAR_prefix: ${{ env.PREFIX }}
          TF_VAR_location: ${{ env.REGION }}
          TF_VAR_resource_group_name: ${{ env.RG }}
          TF_VAR_queue_name: ${{ env.QUEUE_NAME }}
        run: |
          set -e
          SUB=$(az account show --query id -o tsv)
          RG="${{ env.RG }}"
          PREFIX="${{ env.PREFIX }}"
          ACA_ENV_ID="/subscriptions/$SUB/resourceGroups/$RG/providers/Microsoft.App/managedEnvironments/${PREFIX}-acaenv"
          API_ID="/subscriptions/$SUB/resourceGroups/$RG/providers/Microsoft.App/containerApps/${PREFIX}-api"
          WORKER_ID="/subscriptions/$SUB/resourceGroups/$RG/providers/Microsoft.App/containerApps/${PREFIX}-worker"

          exists () { az resource show --ids "$1" >/dev/null 2>&1; }
          instate () { terraform state show "$1" >/dev/null 2>&1; }

          if exists "$ACA_ENV_ID" && ! instate azurerm_container_app_environment.env; then
            terraform import azurerm_container_app_environment.env "$ACA_ENV_ID" || true
          fi
          if exists "$API_ID" && ! instate azurerm_container_app.api[0]; then
            terraform import azurerm_container_app.api[0] "$API_ID" || true
          fi
          if exists "$WORKER_ID" && ! instate azurerm_container_app.worker[0]; then
            terraform import azurerm_container_app.worker[0] "$WORKER_ID" || true
          fi

      - name: Terraform Apply (create apps)
        working-directory: infra
        run: |
          terraform apply -auto-approve -input=false -no-color -lock-timeout=2m \
            -var="prefix=${{ env.PREFIX }}" \
            -var="location=${{ env.REGION }}" \
            -var="resource_group_name=${{ env.RG }}" \
            -var="queue_name=${{ env.QUEUE_NAME }}" \
            -var="create_apps=true" \
            -var="image_tag=${{ github.sha }}"

      - name: Output API URL
        working-directory: infra
        run: terraform output fastapi_url
