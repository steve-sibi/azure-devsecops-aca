name: Deploy
on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGION: eastus
  PREFIX: devsecopsaca
  RG: rg-devsecops-aca
  TFSTATE_SA: stdevsecopsacatfstate   # must be globally-unique, 3-24 lowercase
  TFSTATE_CONTAINER: tfstate
  TFSTATE_KEY: devsecopsaca.tfstate
  QUEUE_NAME: tasks

jobs:
  infra-bootstrap:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - uses: hashicorp/setup-terraform@v3

      - name: Bootstrap TF state storage (idempotent)
        run: |
          az storage account create \
            -g "${{ env.RG }}" -n "${{ env.TFSTATE_SA }}" -l "${{ env.REGION }}" \
            --sku Standard_LRS --kind StorageV2
          az storage container create \
            --account-name "${{ env.TFSTATE_SA }}" \
            -n "${{ env.TFSTATE_CONTAINER }}" --auth-mode login

      - name: Terraform Init (remote backend)
        working-directory: infra
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.RG }}" \
            -backend-config="storage_account_name=${{ env.TFSTATE_SA }}" \
            -backend-config="container_name=${{ env.TFSTATE_CONTAINER }}" \
            -backend-config="key=${{ env.TFSTATE_KEY }}" \
            -backend-config="use_azuread_auth=true"

      - name: Terraform Import existing (safe if absent)
        working-directory: infra
        run: |
          set -e
          SUB=$(az account show --query id -o tsv)
          RG="${{ env.RG }}"
          PREFIX="${{ env.PREFIX }}"
          QUEUE="${{ env.QUEUE_NAME }}"

          APPINSIGHTS_ID="/subscriptions/$SUB/resourceGroups/$RG/providers/Microsoft.Insights/components/${PREFIX}-appi"
          SB_QUEUE_ID="/subscriptions/$SUB/resourceGroups/$RG/providers/Microsoft.ServiceBus/namespaces/${PREFIX}-sbns/queues/${QUEUE}"
          SB_SAS_ID="/subscriptions/$SUB/resourceGroups/$RG/providers/Microsoft.ServiceBus/namespaces/${PREFIX}-sbns/authorizationRules/app-shared"
          ACA_ENV_ID="/subscriptions/$SUB/resourceGroups/$RG/providers/Microsoft.App/managedEnvironments/${PREFIX}-acaenv"

          exists () { az resource show --ids "$1" >/dev/null 2>&1; }
          instate () { terraform state show "$1" >/dev/null 2>&1; }

          if exists "$APPINSIGHTS_ID" && ! instate azurerm_application_insights.appi; then
            terraform import azurerm_application_insights.appi "$APPINSIGHTS_ID" || true
          fi
          if exists "$SB_QUEUE_ID" && ! instate azurerm_servicebus_queue.q; then
            terraform import azurerm_servicebus_queue.q "$SB_QUEUE_ID" || true
          fi
          if exists "$SB_SAS_ID" && ! instate azurerm_servicebus_namespace_authorization_rule.sas; then
            terraform import azurerm_servicebus_namespace_authorization_rule.sas "$SB_SAS_ID" || true
          fi
          if exists "$ACA_ENV_ID" && ! instate azurerm_container_app_environment.env; then
            terraform import azurerm_container_app_environment.env "$ACA_ENV_ID" || true
          fi

      - name: Terraform Apply (infra only)
        working-directory: infra
        run: |
          terraform apply -auto-approve -input=false -no-color \
            -var="prefix=${{ env.PREFIX }}" \
            -var="location=${{ env.REGION }}" \
            -var="resource_group_name=${{ env.RG }}" \
            -var="queue_name=${{ env.QUEUE_NAME }}" \
            -var="create_apps=false"

      - name: Get ACR login server
        id: acr
        run: |
          ACR=$(az acr list -g "${{ env.RG }}" --query "[?contains(name, '${{ env.PREFIX }}acr')].loginServer | [0]" -o tsv)
          echo "login_server=${ACR}" >> $GITHUB_OUTPUT

  build-and-push:
    needs: [infra-bootstrap]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get ACR login server
        id: acr
        run: |
          ACR=$(az acr list -g "${{ env.RG }}" --query "[?contains(name, '${{ env.PREFIX }}acr')].loginServer | [0]" -o tsv)
          echo "login_server=${ACR}" >> $GITHUB_OUTPUT

      - name: ACR login
        run: az acr login --name $(echo "${{ steps.acr.outputs.login_server }}" | cut -d. -f1)

      - name: Build & push API
        run: |
          docker build -t "${{ steps.acr.outputs.login_server }}/${{ env.PREFIX }}-api:${{ github.sha }}" -f app/api/Dockerfile app/api
          docker push "${{ steps.acr.outputs.login_server }}/${{ env.PREFIX }}-api:${{ github.sha }}"

      - name: Build & push Worker
        run: |
          docker build -t "${{ steps.acr.outputs.login_server }}/${{ env.PREFIX }}-worker:${{ github.sha }}" -f app/worker/Dockerfile app/worker
          docker push "${{ steps.acr.outputs.login_server }}/${{ env.PREFIX }}-worker:${{ github.sha }}"

  create-apps:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - uses: hashicorp/setup-terraform@v3

      - name: Terraform Init (remote backend)
        working-directory: infra
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.RG }}" \
            -backend-config="storage_account_name=${{ env.TFSTATE_SA }}" \
            -backend-config="container_name=${{ env.TFSTATE_CONTAINER }}" \
            -backend-config="key=${{ env.TFSTATE_KEY }}" \
            -backend-config="use_azuread_auth=true"

      - name: Terraform Import existing (safe if absent)
        working-directory: infra
        run: |
          set -e
          SUB=$(az account show --query id -o tsv)
          RG="${{ env.RG }}"
          PREFIX="${{ env.PREFIX }}"
          QUEUE="${{ env.QUEUE_NAME }}"
          ACA_ENV_ID="/subscriptions/$SUB/resourceGroups/$RG/providers/Microsoft.App/managedEnvironments/${PREFIX}-acaenv"
          exists () { az resource show --ids "$1" >/dev/null 2>&1; }
          instate () { terraform state show "$1" >/dev/null 2>&1; }
          if exists "$ACA_ENV_ID" && ! instate azurerm_container_app_environment.env; then
            terraform import azurerm_container_app_environment.env "$ACA_ENV_ID" || true
          fi

      - name: Terraform Apply (create apps)
        working-directory: infra
        run: |
          terraform apply -auto-approve -input=false -no-color \
            -var="prefix=${{ env.PREFIX }}" \
            -var="location=${{ env.REGION }}" \
            -var="resource_group_name=${{ env.RG }}" \
            -var="queue_name=${{ env.QUEUE_NAME }}" \
            -var="create_apps=true" \
            -var="image_tag=${{ github.sha }}"

      - name: Output API URL
        working-directory: infra
        run: terraform output fastapi_url
